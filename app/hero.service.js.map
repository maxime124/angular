{"version":3,"file":"hero.service.js","sourceRoot":"","sources":["hero.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable }    from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Hero } from './hero';\r\nimport { HEROES } from './mock-heroes';\r\n\r\n@Injectable()\r\nexport class HeroService {\r\n    private heroesUrl = 'app/heroes';  // URL to web api\r\n    private headers = new Headers({'Content-Type': 'application/json'});\r\n\r\n    constructor(private http: Http) {}\r\n\r\n    getHeroes(): Promise<Hero[]> {\r\n        return this.http.get(this.heroesUrl)\r\n            .toPromise()\r\n            .then(response => response.json().data as Hero[])\r\n            .catch(this.handleError);\r\n    }\r\n    getHeroesSlowly(): Promise<Hero[]> {\r\n        return new Promise<Hero[]>(resolve =>\r\n            setTimeout(resolve, 2000)) // delay 2 seconds\r\n            .then(() => this.getHeroes());\r\n    }\r\n    getHero(id: number): Promise<Hero> {\r\n        return this.getHeroes()\r\n            .then(heroes => heroes.find(hero => hero.id === id));\r\n    }\r\n\r\n    update(hero: Hero): Promise<Hero> {\r\n        const url = `${this.heroesUrl}/${hero.id}`;\r\n        return this.http\r\n            .put(url, JSON.stringify(hero), {headers: this.headers})\r\n            .toPromise()\r\n            .then(() => hero)\r\n            .catch(this.handleError);\r\n    }\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error occurred', error); // for demo purposes only\r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    create(name: string): Promise<Hero> {\r\n        return this.http\r\n            .post(this.heroesUrl, JSON.stringify({name: name}), {headers: this.headers})\r\n            .toPromise()\r\n            .then(res => res.json().data)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    delete(id: number): Promise<void> {\r\n        const url = `${this.heroesUrl}/${id}`;\r\n        return this.http.delete(url, {headers: this.headers})\r\n            .toPromise()\r\n            .then(() => null)\r\n            .catch(this.handleError);\r\n    }\r\n}"]}